{"ast":null,"code":"var _jsxFileName = \"/Users/stevenfan/Documents/2022/Chuwa/project2ts/src/components/home/login/modalcontent/inputfield/index.tsx\";\nimport React from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst InputField = _ref => {\n  let {\n    subject,\n    cname,\n    tabState,\n    input,\n    setInput,\n    valiTime,\n    validator,\n    setValiTime,\n    setInputValue,\n    inpval,\n    predest,\n    wholedest,\n    phList,\n    setPhList,\n    objprop\n  } = _ref;\n  {\n    /*const [isValid, setIsValid] = useState(true); \n    old spot*/\n  }\n\n  const textest = e => {\n    return e;\n  };\n\n  const idgi = () => {\n    console.log(valiTime);\n\n    if (valiTime) {\n      return validator(subject, input).validity;\n    } else {\n      return true;\n    }\n  };\n\n  const tsobjmess = e => {\n    let a = Object.assign({}, e[\"product\"]);\n    console.log(\"a:\");\n    return a;\n  };\n\n  const valueexc = () => {\n    try {\n      console.log(\"tester\");\n      return tabState <= 4 ? inpval : tsobjmess(phList)[objprop];\n    } catch (e) {\n      setPhList(prevState => ({\n        product: prevState\n      }));\n      console.log(\"this is likely phList being empty at the end\");\n      return phList[\"product\"][objprop];\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: tabState >= cname[0] && tabState <= cname[1] ? \"field\" : \"nodisplay\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: subject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), console.log(\"phlist:\"), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: valueexc,\n        onChange: tabState <= 4 ? e => {\n          setInput(e.target.value);\n          setInputValue(e.target.value);\n          setValiTime(false);\n        } : e => {\n          let a = Object.assign({}, phList[\"product\"]);\n          a[objprop] = e.target.value;\n          setPhList(a);\n          {\n            /*setPhList([\"product\"]: {[objprop] : e.target.value})*/\n          }\n        },\n        className: idgi() ? \"valid\" : \"invalid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"errormsg\",\n        children: idgi() ? \"\" : validator(subject, input).error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = InputField;\nexport default InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"names":["React","InputField","subject","cname","tabState","input","setInput","valiTime","validator","setValiTime","setInputValue","inpval","predest","wholedest","phList","setPhList","objprop","textest","e","idgi","console","log","validity","tsobjmess","a","Object","assign","valueexc","prevState","product","target","value","error"],"sources":["/Users/stevenfan/Documents/2022/Chuwa/project2ts/src/components/home/login/modalcontent/inputfield/index.tsx"],"sourcesContent":["import { tab } from \"@testing-library/user-event/dist/tab\";\nimport React, { useState } from \"react\";\nimport \"./index.css\";\n\ninterface typetester {\n  objprop: string;\n}\n\nconst InputField = ({\n  subject,\n  cname,\n  tabState,\n  input,\n  setInput,\n  valiTime,\n  validator,\n  setValiTime,\n  setInputValue,\n  inpval,\n  predest,\n  wholedest,\n  phList,\n  setPhList,\n  objprop,\n}) => {\n  {\n    /*const [isValid, setIsValid] = useState(true); \nold spot*/\n  }\n\n  const textest = (e) => {\n    return e;\n  };\n\n  const idgi = () => {\n    console.log(valiTime);\n    if (valiTime) {\n      return validator(subject, input).validity;\n    } else {\n      return true;\n    }\n  };\n\n  const tsobjmess = (e) => {\n    let a = Object.assign({}, e[\"product\"]);\n    console.log(\"a:\");\n    return a;\n  };\n\n  const valueexc = () => {\n    try {\n      console.log(\"tester\");\n      return tabState <= 4 ? inpval : tsobjmess(phList)[objprop];\n    } catch (e) {\n      setPhList((prevState) => ({\n        product: prevState,\n      }));\n      console.log(\"this is likely phList being empty at the end\");\n      return phList[\"product\"][objprop];\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={\n          tabState >= cname[0] && tabState <= cname[1] ? \"field\" : \"nodisplay\"\n        }\n      >\n        {/*textest(subject)*/}\n        <label>{subject}</label>\n        <br />\n        {console.log(\"phlist:\")}\n        {/*{console.log(phList[\"product\"][objprop])}*/}\n        <input\n          type=\"text\"\n          value={valueexc}\n          onChange={\n            tabState <= 4\n              ? (e) => {\n                  setInput(e.target.value);\n                  setInputValue(e.target.value);\n                  setValiTime(false);\n                }\n              : (e) => {\n                  let a = Object.assign({}, phList[\"product\"]);\n                  a[objprop] = e.target.value;\n                  setPhList(a);\n                  {\n                    /*setPhList([\"product\"]: {[objprop] : e.target.value})*/\n                  }\n                }\n          }\n          className={idgi() ? \"valid\" : \"invalid\"}\n        ></input>\n        <p className=\"errormsg\">\n          {idgi() ? \"\" : validator(subject, input).error}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default InputField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}