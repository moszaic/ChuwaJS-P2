{"ast":null,"code":"var _jsxFileName = \"/Users/stevenfan/Documents/2022/Chuwa/project2ts/src/components/home/login/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport ModalContent from \"./modalcontent\";\nimport Modal from \"../../modalsandwicher/modal\";\nimport GridItem from \"./gridItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Login = _ref => {\n  _s();\n\n  let {\n    visible,\n    setVisible,\n    tabState,\n    setTabState,\n    cart,\n    setCart,\n    loggedIn,\n    setLoggedIn,\n    apiValid,\n    setapiValid,\n    valiTime,\n    setValiTime,\n    putStatus,\n    carTotal,\n    setCarTotal,\n    setApiDone,\n    gridList,\n    setGridList,\n    getLogin,\n    checkLogin,\n    userName,\n    setUserName,\n    putuser,\n    postApi,\n    setPostApi\n  } = _ref;\n  //const [visible, setVisible] = useState(false);\n  //const [tabState, setTabState] = useState(1);\n  //const [inputEmail, setInputEmail] = useState(\"\"); //unused\n  //const [inputPassword, setInputPassword] = useState(\"\"); //unused\n  const [inputValue, setInputValue] = useState({\n    email: \"\",\n    pw: \"\"\n  }); //const [valiTime, setValiTime] = useState(false); //just bring out the input values to ModalContent\n\n  const [preDest, setPreDest] = useState(0); //const [jsonstate, setJsonState] = useState({ 0: \"wow\" });\n\n  const [loginRoster, setLoginRoster] = useState({\n    0: \"wow\"\n  }); //const [postApi, setPostApi] = useState(false);\n  //const [userName, setUserName] = useState({ he: \"wgui\" });\n\n  /*const listFill = (e) => {\n    let x = Object.keys(e).length;\n    let i = 0;\n    e.map();\n  };*/\n\n  const handleVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleTab = e => {\n    setTabState(e);\n    /*let j = {};\n    for (let i = 0; i++; i < Object.keys(inputValue).length) {\n      console.log([Object.keys(inputValue)]);\n      j[Object.keys(inputValue)[i]] = \"\";\n    }*/\n\n    setValiTime(false);\n    setInputValue({\n      email: \"\",\n      pw: \"\"\n    });\n  };\n\n  const titler = tabState => {\n    switch (tabState) {\n      case 1:\n        return \"Sign In\";\n\n      case 2:\n        return \"Sign Up\";\n\n      case 3:\n        return \"Update Password\";\n\n      case 4:\n        return \"PASS UPDATE SBEMT\";\n\n      case 5:\n        return \"grid element product\";\n\n      case 6:\n        //return \"grid detail product\";\n        return \"Product Details\";\n\n      case 7:\n        return \"add product\";\n\n      case 8:\n        return \"Products\";\n\n      default:\n        setTabState(1);\n        return \"\";\n    }\n  };\n  /* const getCustomerApi = async () => {\n    const response = await fetch(`../../../../db.json`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return response;\n  };*/\n\n\n  const getProducts = async () => {\n    const x = await fetch(\"http://localhost:3001/gridList\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(async result => {\n      let a = Object.assign(result);\n\n      try {\n        //username\n        let y = [];\n        let x = Object.keys(a).map((e, i) => {\n          userName[\"cartpredest\"].map((r, j) => {\n            console.log(\"cartcnumr j\" + j);\n            console.log(\"cartcnumr r\" + r);\n            console.log(\"cartcnum result[price]\" + JSON.stringify(result[i]));\n            console.log(\"cartcnum result[id]\" + result[\"id\"]);\n            /* console.log(\n              \"cartcnum userName[cartcnum][j]\" + userName[\"cartcnum\"][j]\n            );\n            console.log(\n              \"cartcnum userName[cartpredest][j]\" + userName[\"cartpredest\"][j]\n            );*/\n\n            if (a[i][\"idnum\"] == r) {\n              a[r][\"cartnum\"] = userName[\"cartcnum\"][j];\n            } else {\n              a[r][\"cartnum\"] = 0;\n            }\n          });\n        });\n        console.log(\"cartcnumr a\" + JSON.stringify(a));\n        setGridList(a);\n        console.log(\"zoo wee mama\" + x);\n      } catch (e) {\n        console.log(\"wagamama\" + e);\n        setGridList(result);\n      } //console.log(\"result ==\" + JSON.stringify(result[0][1].name));\n\n\n      return result;\n    });\n    return x;\n    /*.then((res) => res.json())\n      .then((result) => {\n        console.log(\"incoming result\");\n        //console.log(result[0][1]);\n        console.log(result);\n      })\n      .catch(console.log);*/\n    //return x.json();\n\n    /*const y = await x.json();\n    console.log(\"use2 = \" + JSON.stringify(y));\n    return y;*/\n  };\n  /*const getLogin = async () => {\n    const x = await fetch(\"http://localhost:3001/users\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        //setGridList(result);\n        return result;\n      });\n    return x;\n  };*/\n\n\n  const postposter = async () => {\n    if (!postApi) {\n      await fetch(\"http://localhost:3001/gridList\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application.json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(gridList)\n      }).then(response => {\n        if (response.ok) {\n          setPostApi(true);\n          return response.json();\n        }\n      }); //return changeProducts;\n    }\n  };\n\n  const putposter = async (i, e) => {\n    let x = 0;\n    await fetch(\"http://localhost:3001/gridList/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(e)\n    }).then(response => {\n      if (response.ok) {\n        console.log(\"ecartnum\" + e.cartnum);\n        getProducts();\n        setPostApi(true); //setCarTotal((carTotal += x));\n\n        return response.json();\n      }\n    });\n  };\n  /* const putuser = async (i, e, a, b) => {\n    let x = i;\n    let y = { ...e, cartpredest: a, cartcnum: b };\n    await fetch(\"http://localhost:3001/users/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(y),\n    }).then((response) => {\n      if (response.ok) {\n        setPostApi(true);\n        return response.json();\n      }\n    });\n  };*/\n\n\n  const jsonformatter = async () => {\n    //if (!apidone) {\n    //let x = await getProducts();\n    //let y = Object.assign(gridList);\n    //console.log(\"nannyexpress style - \" + JSON.stringify(jsonstate[0][\"0\"]));\n    //console.log(\"jsonstate\");\n    //setApiDone(true);\n    //setJsonState(await getProducts());\n    getProducts();\n    setLoginRoster(await getLogin()); //console.log(\"gridList check \" + gridList[1]);\n    //return x;\n\n    /*} else {\n      let x = {};\n      return x;\n    }*/\n  };\n  /*const letsago = async () => {\n    let q = 0;\n    let x = await jsonformatter();\n    //setCarTotal(q);\n    return x;\n  };*/\n\n  /*const checkLogin = async (a, b) => {\n    let x = await getLogin();\n    let y = false;\n    let z = \"\";\n    console.log(\"excalixer: \" + JSON.stringify(x[0][\"email\"]));\n    await Object.keys(x).map((e, i) => {\n      console.log(\"excali\" + JSON.stringify(x[1]));\n      if (x[i][\"email\"] == a && x[i][\"pw\"] == b) {\n        y = true;\n        setUserName(x[i]);\n        z = x[i][\"email\"];\n      }\n    });\n    setapiValid(y);\n    putStatus({ status: y });\n    return z;\n  };*/\n\n\n  useEffect(() => {\n    jsonformatter();\n  }, []);\n  useEffect(() => {\n    getProducts();\n  }, [userName]);\n  useEffect(() => {\n    console.log(\"http://localhost:3001/gridList/\" + \"4\"); //jsonformatter();\n\n    let q = 0;\n    Object.keys(gridList).map((e, i) => {\n      console.log(\"qwer\" + JSON.stringify(gridList[i].cartnum));\n\n      if (gridList[i].cartnum != undefined) {\n        q += gridList[i].cartnum;\n      }\n    });\n    console.log(\"i have been called on first wert\" + gridList[1].cartnum);\n    setCarTotal(q); //setApiDone(true);\n\n    /*try {\n      console.log(\"jsonstate test - \" + jsonstate![0][\"1\"][\"name\"]);\n    } catch (e) {\n      console.log(\"goddamnit im trying\");\n    }*/\n    //putposter(4, gridList[2]);\n    //console.log(gridList[2]);\n\n    /*async function apitry() {\n      const x = await getCustomerApi();\n      console.log(\"api attempt\");\n      console.log(JSON.stringify(x));\n    }*/\n\n    /*() => {\n      fetch(\"http://localhost:3001/posts\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      }).then((response) => {\n        if (!response.ok) {\n          console.log(\"wtf is happenin\");\n          throw new Error(\"idk wtf is goin on\");\n        }\n        console.log(\"this is the fetch result\");\n        console.log(response.json());\n        return response.json();\n      });\n    };*/\n    //changeProducts();\n  }, [gridList]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(\"fetch result\"), console.log(\"before getProducts\"), \" \", console.log(\"after getProducts\"), console.log(\"gridList stringify - \" + JSON.stringify({\n      gridList\n    })), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: visible,\n      tabState: tabState,\n      setTabState: setTabState,\n      handleVisible: handleVisible,\n      titleText: titler(tabState),\n      inputValue: inputValue,\n      setInputValue: setInputValue,\n      valiTime: valiTime //name is unclear\n      ,\n      setValiTime: setValiTime,\n      handleTab: handleTab,\n      gridList: gridList,\n      setPreDest: setPreDest,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setTabState(tabState + 1),\n          children: \"tabstate changer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), tabState != 8 ? /*#__PURE__*/_jsxDEV(ModalContent, {\n          tabState: tabState,\n          setTabState: setTabState,\n          inputValue: inputValue,\n          setInputValue: setInputValue,\n          valiTime: valiTime,\n          setValiTime: setValiTime,\n          handleTab: handleTab,\n          gridList: gridList,\n          setGridList: setGridList,\n          preDest: preDest,\n          setPreDest: setPreDest,\n          putposter: putposter,\n          getProducts: getProducts,\n          cart: cart,\n          setCart: setCart,\n          loggedIn: loggedIn,\n          setLoggedIn: setLoggedIn,\n          apiValid: apiValid,\n          setapiValid: setapiValid,\n          checkLogin: checkLogin,\n          getLogin: getLogin,\n          putuser: putuser,\n          putStatus: putStatus,\n          carTotal: carTotal,\n          setCarTotal: setCarTotal,\n          setUserName: setUserName,\n          userName: userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: Object.keys(gridList).slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 15\n          }, this), Object.keys(gridList).slice(2).map((e, i) => {\n            if (Object.keys(gridList[i + 1]).length > 1) {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [console.log(\"id\" + i), /*#__PURE__*/_jsxDEV(GridItem, {\n                  tabState: tabState,\n                  setTabState: setTabState,\n                  itemnum: i + 1,\n                  setPreDest: setPreDest,\n                  preDest: preDest,\n                  setValiTime: setValiTime,\n                  gridList: gridList,\n                  setGridList: setGridList,\n                  cart: cart,\n                  setCart: setCart,\n                  putposter: putposter,\n                  carTotal: carTotal,\n                  setCarTotal: setCarTotal,\n                  putuser: putuser\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 403,\n                  columnNumber: 25\n                }, this)]\n              }, \"id\" + i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 23\n              }, this);\n            }\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"user: \", JSON.stringify(userName)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"cartotal: \", carTotal]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"tabstate: \", tabState]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: JSON.stringify(gridList)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"preDest: \", preDest]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"inputValue: \", inputValue.email, \", \", inputValue.pw]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"apivalid: \", apiValid ? \"true\" : \"false\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Login, \"liPZNRZFOtgX8iV2j2lw+QJjyrw=\");\n\n_c = Login;\nexport default Login;\n{\n  /*name: \"guy 1\",\n      desc: \"wow\",\n      category: \"sports\",\n      price: 10,\n      quantity: 20,\n    img: \"\",*/\n}\n{\n  /* <p>tabstate: {tabState}</p>\n            <p>{JSON.stringify(gridList)}</p>\n            <p>preDest: {preDest}</p>\n            <p>\n              inputValue: {inputValue.email}, {inputValue.pw}\n            </p>\n            <p>apivalid: {apiValid ? \"true\" : \"false\"}</p>*/\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","ModalContent","Modal","GridItem","Login","visible","setVisible","tabState","setTabState","cart","setCart","loggedIn","setLoggedIn","apiValid","setapiValid","valiTime","setValiTime","putStatus","carTotal","setCarTotal","setApiDone","gridList","setGridList","getLogin","checkLogin","userName","setUserName","putuser","postApi","setPostApi","inputValue","setInputValue","email","pw","preDest","setPreDest","loginRoster","setLoginRoster","handleVisible","handleTab","e","titler","getProducts","x","fetch","method","headers","then","res","json","result","a","Object","assign","y","keys","map","i","r","j","console","log","JSON","stringify","postposter","Accept","body","response","ok","putposter","cartnum","jsonformatter","q","undefined","slice","length"],"sources":["/Users/stevenfan/Documents/2022/Chuwa/project2ts/src/components/home/login/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\n\nimport MyModal from \"../../modalsandwicher\";\nimport ModalContent from \"./modalcontent\";\nimport Modal from \"../../modalsandwicher/modal\";\nimport HomeContent from \"./homecontent\";\nimport GridItem from \"./gridItem\";\n\nconst Login = ({\n  visible,\n  setVisible,\n  tabState,\n  setTabState,\n  cart,\n  setCart,\n  loggedIn,\n  setLoggedIn,\n  apiValid,\n  setapiValid,\n  valiTime,\n  setValiTime,\n  putStatus,\n  carTotal,\n  setCarTotal,\n  setApiDone,\n  gridList,\n  setGridList,\n  getLogin,\n  checkLogin,\n  userName,\n  setUserName,\n  putuser,\n  postApi,\n  setPostApi,\n}) => {\n  //const [visible, setVisible] = useState(false);\n  //const [tabState, setTabState] = useState(1);\n  //const [inputEmail, setInputEmail] = useState(\"\"); //unused\n  //const [inputPassword, setInputPassword] = useState(\"\"); //unused\n  const [inputValue, setInputValue] = useState({ email: \"\", pw: \"\" });\n  //const [valiTime, setValiTime] = useState(false); //just bring out the input values to ModalContent\n  const [preDest, setPreDest] = useState(0);\n  //const [jsonstate, setJsonState] = useState({ 0: \"wow\" });\n  const [loginRoster, setLoginRoster] = useState({ 0: \"wow\" });\n  //const [postApi, setPostApi] = useState(false);\n  //const [userName, setUserName] = useState({ he: \"wgui\" });\n\n  /*const listFill = (e) => {\n    let x = Object.keys(e).length;\n    let i = 0;\n    e.map();\n  };*/\n\n  const handleVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleTab = (e) => {\n    setTabState(e);\n\n    /*let j = {};\n    for (let i = 0; i++; i < Object.keys(inputValue).length) {\n      console.log([Object.keys(inputValue)]);\n      j[Object.keys(inputValue)[i]] = \"\";\n    }*/\n    setValiTime(false);\n    setInputValue({ email: \"\", pw: \"\" });\n  };\n\n  const titler = (tabState) => {\n    switch (tabState) {\n      case 1:\n        return \"Sign In\";\n      case 2:\n        return \"Sign Up\";\n      case 3:\n        return \"Update Password\";\n      case 4:\n        return \"PASS UPDATE SBEMT\";\n      case 5:\n        return \"grid element product\";\n      case 6:\n        //return \"grid detail product\";\n        return \"Product Details\";\n      case 7:\n        return \"add product\";\n      case 8:\n        return \"Products\";\n      default:\n        setTabState(1);\n        return \"\";\n    }\n  };\n\n  /* const getCustomerApi = async () => {\n    const response = await fetch(`../../../../db.json`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return response;\n  };*/\n  const getProducts = async () => {\n    const x = await fetch(\"http://localhost:3001/gridList\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then(async (result) => {\n        let a = Object.assign(result);\n        try {\n          //username\n          let y = [];\n          let x = Object.keys(a).map((e, i) => {\n            userName[\"cartpredest\"].map((r, j) => {\n              console.log(\"cartcnumr j\" + j);\n              console.log(\"cartcnumr r\" + r);\n              console.log(\"cartcnum result[price]\" + JSON.stringify(result[i]));\n              console.log(\"cartcnum result[id]\" + result[\"id\"]);\n              /* console.log(\n                \"cartcnum userName[cartcnum][j]\" + userName[\"cartcnum\"][j]\n              );\n              console.log(\n                \"cartcnum userName[cartpredest][j]\" + userName[\"cartpredest\"][j]\n              );*/\n              if (a[i][\"idnum\"] == r) {\n                a[r][\"cartnum\"] = userName[\"cartcnum\"][j];\n              } else {\n                a[r][\"cartnum\"] = 0;\n              }\n            });\n          });\n          console.log(\"cartcnumr a\" + JSON.stringify(a));\n          setGridList(a);\n          console.log(\"zoo wee mama\" + x);\n        } catch (e) {\n          console.log(\"wagamama\" + e);\n          setGridList(result);\n        }\n        //console.log(\"result ==\" + JSON.stringify(result[0][1].name));\n        return result;\n      });\n    return x;\n    /*.then((res) => res.json())\n      .then((result) => {\n        console.log(\"incoming result\");\n        //console.log(result[0][1]);\n        console.log(result);\n      })\n      .catch(console.log);*/\n\n    //return x.json();\n    /*const y = await x.json();\n    console.log(\"use2 = \" + JSON.stringify(y));\n    return y;*/\n  };\n  /*const getLogin = async () => {\n    const x = await fetch(\"http://localhost:3001/users\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        //setGridList(result);\n        return result;\n      });\n    return x;\n  };*/\n\n  const postposter = async () => {\n    if (!postApi) {\n      await fetch(\"http://localhost:3001/gridList\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application.json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(gridList),\n      }).then((response) => {\n        if (response.ok) {\n          setPostApi(true);\n          return response.json();\n        }\n      });\n      //return changeProducts;\n    }\n  };\n\n  const putposter = async (i, e) => {\n    let x = 0;\n    await fetch(\"http://localhost:3001/gridList/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(e),\n    }).then((response) => {\n      if (response.ok) {\n        console.log(\"ecartnum\" + e.cartnum);\n        getProducts();\n        setPostApi(true);\n        //setCarTotal((carTotal += x));\n        return response.json();\n      }\n    });\n  };\n\n  /* const putuser = async (i, e, a, b) => {\n    let x = i;\n    let y = { ...e, cartpredest: a, cartcnum: b };\n    await fetch(\"http://localhost:3001/users/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(y),\n    }).then((response) => {\n      if (response.ok) {\n        setPostApi(true);\n        return response.json();\n      }\n    });\n  };*/\n\n  const jsonformatter = async () => {\n    //if (!apidone) {\n    //let x = await getProducts();\n    //let y = Object.assign(gridList);\n    //console.log(\"nannyexpress style - \" + JSON.stringify(jsonstate[0][\"0\"]));\n    //console.log(\"jsonstate\");\n    //setApiDone(true);\n    //setJsonState(await getProducts());\n    getProducts();\n    setLoginRoster(await getLogin());\n    //console.log(\"gridList check \" + gridList[1]);\n    //return x;\n    /*} else {\n      let x = {};\n      return x;\n    }*/\n  };\n\n  /*const letsago = async () => {\n    let q = 0;\n    let x = await jsonformatter();\n    //setCarTotal(q);\n    return x;\n  };*/\n\n  /*const checkLogin = async (a, b) => {\n    let x = await getLogin();\n    let y = false;\n    let z = \"\";\n    console.log(\"excalixer: \" + JSON.stringify(x[0][\"email\"]));\n    await Object.keys(x).map((e, i) => {\n      console.log(\"excali\" + JSON.stringify(x[1]));\n      if (x[i][\"email\"] == a && x[i][\"pw\"] == b) {\n        y = true;\n        setUserName(x[i]);\n        z = x[i][\"email\"];\n      }\n    });\n    setapiValid(y);\n    putStatus({ status: y });\n    return z;\n  };*/\n\n  useEffect(() => {\n    jsonformatter();\n  }, []);\n\n  useEffect(() => {\n    getProducts();\n  }, [userName]);\n\n  useEffect(() => {\n    console.log(\"http://localhost:3001/gridList/\" + \"4\");\n\n    //jsonformatter();\n    let q = 0;\n    Object.keys(gridList).map((e, i) => {\n      console.log(\"qwer\" + JSON.stringify(gridList[i].cartnum));\n      if (gridList[i].cartnum != undefined) {\n        q += gridList[i].cartnum;\n      }\n    });\n    console.log(\"i have been called on first wert\" + gridList[1].cartnum);\n    setCarTotal(q);\n    //setApiDone(true);\n\n    /*try {\n      console.log(\"jsonstate test - \" + jsonstate![0][\"1\"][\"name\"]);\n    } catch (e) {\n      console.log(\"goddamnit im trying\");\n    }*/\n    //putposter(4, gridList[2]);\n    //console.log(gridList[2]);\n    /*async function apitry() {\n      const x = await getCustomerApi();\n      console.log(\"api attempt\");\n      console.log(JSON.stringify(x));\n    }*/\n    /*() => {\n      fetch(\"http://localhost:3001/posts\", {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      }).then((response) => {\n        if (!response.ok) {\n          console.log(\"wtf is happenin\");\n          throw new Error(\"idk wtf is goin on\");\n        }\n        console.log(\"this is the fetch result\");\n        console.log(response.json());\n        return response.json();\n      });\n    };*/\n    //changeProducts();\n  }, [gridList]);\n\n  return (\n    <>\n      {console.log(\"fetch result\")}\n      {console.log(\"before getProducts\")}\n      {/*{async () => {\n        console.log(\"usuable gedsfat\" + (await getProducts()));\n      }}*/}{\" \"}\n      {/* for some reason this never showed up on console, also disappeared \"use2\" */}\n      {console.log(\"after getProducts\")}\n      {console.log(\"gridList stringify - \" + JSON.stringify({ gridList }))}\n      {/*<a>jsonguh{apidone ? jsonstate![0][1][\"name\"] : \"nothin\"}</a>*/}\n      {/*{changeposter().then((e) => console.log(\"change attempt \" + e))}*/}\n      {/*<div className={\"headers\"}>\n        <span className={\"logbutton\"} onClick={() => setVisible(!visible)}>\n          Login\n        </span>\n  </div>*/}\n      <Modal\n        visible={visible}\n        tabState={tabState}\n        setTabState={setTabState}\n        handleVisible={handleVisible}\n        titleText={titler(tabState)}\n        inputValue={inputValue}\n        setInputValue={setInputValue}\n        valiTime={valiTime} //name is unclear\n        setValiTime={setValiTime}\n        handleTab={handleTab}\n        gridList={gridList}\n        setPreDest={setPreDest}\n      >\n        <>\n          <button onClick={() => setTabState(tabState + 1)}>\n            tabstate changer\n          </button>\n          {tabState != 8 ? (\n            <ModalContent\n              tabState={tabState}\n              setTabState={setTabState}\n              inputValue={inputValue}\n              setInputValue={setInputValue}\n              valiTime={valiTime}\n              setValiTime={setValiTime}\n              handleTab={handleTab}\n              gridList={gridList}\n              setGridList={setGridList}\n              preDest={preDest}\n              setPreDest={setPreDest}\n              putposter={putposter}\n              getProducts={getProducts}\n              cart={cart}\n              setCart={setCart}\n              loggedIn={loggedIn}\n              setLoggedIn={setLoggedIn}\n              apiValid={apiValid}\n              setapiValid={setapiValid}\n              checkLogin={checkLogin}\n              getLogin={getLogin}\n              putuser={putuser}\n              putStatus={putStatus}\n              carTotal={carTotal}\n              setCarTotal={setCarTotal}\n              setUserName={setUserName}\n              userName={userName}\n            />\n          ) : (\n            <div>\n              <p>{Object.keys(gridList).slice(1)}</p>\n              {Object.keys(gridList)\n                .slice(2)\n                .map((e, i) => {\n                  if (Object.keys(gridList[i + 1]).length > 1) {\n                    return (\n                      <span key={\"id\" + i}>\n                        {console.log(\"id\" + i)}\n                        <GridItem\n                          tabState={tabState}\n                          setTabState={setTabState}\n                          itemnum={i + 1}\n                          setPreDest={setPreDest}\n                          preDest={preDest}\n                          setValiTime={setValiTime}\n                          gridList={gridList}\n                          setGridList={setGridList}\n                          cart={cart}\n                          setCart={setCart}\n                          putposter={putposter}\n                          carTotal={carTotal}\n                          setCarTotal={setCarTotal}\n                          putuser={putuser}\n                        />\n                      </span>\n                    );\n                  }\n                })}\n\n              {/*<GridItem\n                tabState={tabState}\n                setTabState={setTabState}\n                itemnum={1}\n                setPreDest={setPreDest}\n                preDest={preDest}\n                setValiTime={setValiTime}\n                gridList={gridList}\n              />\n              <GridItem\n                tabState={tabState}\n                setTabState={setTabState}\n                itemnum={2}\n                setPreDest={setPreDest}\n                preDest={preDest}\n                setValiTime={setValiTime}\n                gridList={gridList}\n            />*/}\n            </div>\n          )}\n          <p>user: {JSON.stringify(userName)}</p>\n          <p>cartotal: {carTotal}</p>\n          <p>tabstate: {tabState}</p>\n          <p>{JSON.stringify(gridList)}</p>\n          <p>preDest: {preDest}</p>\n          <p>\n            inputValue: {inputValue.email}, {inputValue.pw}\n          </p>\n          <p>apivalid: {apiValid ? \"true\" : \"false\"}</p>\n        </>\n      </Modal>\n    </>\n  );\n};\n\nexport default Login;\n{\n  /*name: \"guy 1\",\n      desc: \"wow\",\n      category: \"sports\",\n      price: 10,\n      quantity: 20,\n    img: \"\",*/\n}\n{\n  /* <p>tabstate: {tabState}</p>\n            <p>{JSON.stringify(gridList)}</p>\n            <p>preDest: {preDest}</p>\n            <p>\n              inputValue: {inputValue.email}, {inputValue.pw}\n            </p>\n            <p>apivalid: {apiValid ? \"true\" : \"false\"}</p>*/\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}