{"ast":null,"code":"var _jsxFileName = \"/Users/stevenfan/Documents/2022/Chuwa/project2ts/src/components/home/login/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport ModalContent from \"./modalcontent\";\nimport Modal from \"../../modalsandwicher/modal\";\nimport GridItem from \"./gridItem\";\nimport PageButton from \"./pagebutton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Login = _ref => {\n  _s();\n\n  let {\n    visible,\n    setVisible,\n    tabState,\n    setTabState,\n    cart,\n    setCart,\n    loggedIn,\n    setLoggedIn,\n    apiValid,\n    setapiValid,\n    valiTime,\n    setValiTime,\n    putStatus,\n    carTotal,\n    setCarTotal,\n    setApiDone,\n    gridList,\n    setGridList,\n    getLogin,\n    checkLogin,\n    userName,\n    setUserName,\n    putuser,\n    postApi,\n    setPostApi,\n    inputValue,\n    setInputValue,\n    putposter,\n    getProducts,\n    setPreDest,\n    preDest,\n    pageNum,\n    setPageNum,\n    emailErr,\n    setEmailErr,\n    isLoading\n  } = _ref;\n  //const [visible, setVisible] = useState(false);\n  //const [tabState, setTabState] = useState(1);\n  //const [inputEmail, setInputEmail] = useState(\"\"); //unused\n  //const [inputPassword, setInputPassword] = useState(\"\"); //unused\n  //const [inputValue, setInputValue] = useState({ email: \"\", pw: \"\" });\n  //const [valiTime, setValiTime] = useState(false); //just bring out the input values to ModalContent\n  //const [preDest, setPreDest] = useState(0);\n  //const [jsonstate, setJsonState] = useState({ 0: \"wow\" });\n  const [loginRoster, setLoginRoster] = useState({\n    0: \"wow\"\n  }); //const [postApi, setPostApi] = useState(false);\n  //const [userName, setUserName] = useState({ he: \"wgui\" });\n  //const [pageNum, setPageNum] = useState(1);\n\n  const [pageCount, setPageCount] = useState([]);\n  const [chosenOne, setChosenOne] = useState(1);\n  const [sortList, setSortList] = useState([0]);\n  /*const listFill = (e) => {\n    let x = Object.keys(e).length;\n    let i = 0;\n    e.map();\n  };*/\n\n  const handleVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleTab = e => {\n    setTabState(e);\n    /*let j = {};\n    for (let i = 0; i++; i < Object.keys(inputValue).length) {\n      console.log([Object.keys(inputValue)]);\n      j[Object.keys(inputValue)[i]] = \"\";\n    }*/\n\n    setValiTime(false);\n    setInputValue({\n      email: \"\",\n      pw: \"\"\n    });\n  };\n\n  const titler = tabState => {\n    switch (tabState) {\n      case 1:\n        return \"Sign In\";\n\n      case 2:\n        return \"Sign Up\";\n\n      case 3:\n        return \"Update Password\";\n\n      case 4:\n        return \"PASS UPDATE SBEMT\";\n\n      case 5:\n        return \"grid element product\";\n\n      case 6:\n        //return \"grid detail product\";\n        return \"Product Details\";\n\n      case 7:\n        //return \"add product\";\n        return \"Add Product\";\n\n      case 8:\n        return \"Products\";\n\n      default:\n        setTabState(1);\n        return \"\";\n    }\n  };\n  /* const getCustomerApi = async () => {\n    const response = await fetch(`../../../../db.json`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return response;\n  };*/\n\n\n  const postposter = async () => {\n    if (!postApi) {\n      await fetch(\"http://localhost:3002/gridList\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application.json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(gridList)\n      }).then(response => {\n        if (response.ok) {\n          setPostApi(true);\n          return response.json();\n        }\n      }); //return changeProducts;\n    }\n  };\n  /*const putposter = async (i, e) => {\n    let x = 0;\n    await fetch(\"http://localhost:3001/gridList/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(e),\n    }).then((response) => {\n      if (response.ok) {\n        console.log(\"ecartnum\" + e.cartnum);\n        getProducts();\n        setPostApi(true);\n        //setCarTotal((carTotal += x));\n        return response.json();\n      }\n    });\n  };*/\n\n  /* const putuser = async (i, e, a, b) => {\n    let x = i;\n    let y = { ...e, cartpredest: a, cartcnum: b };\n    await fetch(\"http://localhost:3001/users/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(y),\n    }).then((response) => {\n      if (response.ok) {\n        setPostApi(true);\n        return response.json();\n      }\n    });\n  };*/\n\n\n  const pageButton = e => {\n    let y = [];\n    let z = 0; //console.log(\"pagenum\" + Object.keys(e[1]).length);\n\n    Object.keys(e).slice(1).map((j, i) => {\n      if (Object.keys(e[i]).length > 1) {\n        z++;\n        /*console.log(\"pagenum z\" + (z % 6));\n        if (z % 6 == 0) {\n          y.push(1);\n        }*/\n\n        /*return (\n        <>\n          <button\n            className=\"pagebutton\"\n            onClick={() => {\n              setPageNum(i * 6 + 1);\n            }}\n          >\n            {i}\n          </button>\n          <p>{gridList.length / 6 + 1}</p>\n        </>\n        );*/\n      }\n    });\n    z--; //y.push(1);\n\n    let a = Math.ceil(z / 6);\n\n    for (let i = 0; i < a; i++) {\n      y.push(1);\n    } //console.log(\"pagenum z\" + z);\n\n\n    setPageCount(y);\n    /*for (let i = 0; i < x.length / 6 + 1; i++) {\n      return (\n        \n      );\n    }*/\n  };\n\n  const pageend = () => {\n    /*\n    let counter = 0;\n    let index = 0;\n    while (counter < 6 && pageNum + index < Object.keys(gridList).length) {\n      console.log(\"counterindex\");\n      if (\n        gridList[index] !== undefined &&\n        Object.keys(gridList[pageNum + index]).length > 1\n      ) {\n        counter++;\n      }\n      index++;\n    }*/\n    //let a = 6 - Object.keys(gridList).slice(pageNum).length;\n    //let a = counter - Object.keys(gridList).slice(pageNum).length;\n\n    /*if (a < 0) {\n      return 6;\n    } else {\n      return Object.keys(gridList).slice(pageNum).length;\n    }*/\n    if (Object.keys(gridList).slice(pageNum).length > 6) {\n      //return [index];\n      return 6;\n    } else {\n      return [Object.keys(gridList).slice(pageNum).length];\n    }\n  };\n\n  const jsonformatter = async () => {\n    //if (!apidone) {\n    //let x = await getProducts();\n    //let y = Object.assign(gridList);\n    //console.log(\"nannyexpress style - \" + JSON.stringify(jsonstate[0][\"0\"]));\n    //console.log(\"jsonstate\");\n    //setApiDone(true);\n    //setJsonState(await getProducts());\n    getProducts().then(e => {\n      pageButton(e);\n    });\n    setLoginRoster(await getLogin()); //console.log(\"gridList check \" + gridList[1]);\n    //return x;\n\n    /*} else {\n      let x = {};\n      return x;\n    }*/\n  };\n  /*const letsago = async () => {\n    let q = 0;\n    let x = await jsonformatter();\n    //setCarTotal(q);\n    return x;\n  };*/\n\n  /*const checkLogin = async (a, b) => {\n    let x = await getLogin();\n    let y = false;\n    let z = \"\";\n    console.log(\"excalixer: \" + JSON.stringify(x[0][\"email\"]));\n    await Object.keys(x).map((e, i) => {\n      console.log(\"excali\" + JSON.stringify(x[1]));\n      if (x[i][\"email\"] == a && x[i][\"pw\"] == b) {\n        y = true;\n        setUserName(x[i]);\n        z = x[i][\"email\"];\n      }\n    });\n    setapiValid(y);\n    putStatus({ status: y });\n    return z;\n  };*/\n\n\n  useEffect(() => {\n    pageButton(gridList);\n    listsorter(gridList);\n  }, [gridList]);\n  useEffect(() => {\n    jsonformatter();\n  }, []);\n\n  const listsorter = e => {\n    let wtf = Object.keys(e).filter(haveidnum => e[haveidnum].idnum !== undefined).sort((j, k) => {\n      //console.log(\"sorter gL[j]\" + e[j].idnum);\n      //console.log(\"sorter gL[k]\" + e[k].idnum);\n      return e[j].idnum - e[k].idnum; //August 28 wipe change # 27 hooey this is an attempt //didn't work cause it's only sorting the given 6cut //putit before slice\n    }).slice(pageNum - 1, pageNum + pageend() - 1);\n    console.log(\"sorterpageend\" + pageend());\n    let intarray = wtf.map(e => {\n      return parseInt(e); //the biggest return of my life\n    });\n    setSortList(intarray);\n    console.log(\"sorter wtf\" + JSON.stringify(wtf));\n  };\n\n  useEffect(() => {\n    //August 28 wipe change # 23 now changes only when email changes, not any userName cart change\n    getProducts().then(e => {\n      pageButton(e);\n      listsorter(e);\n    });\n  }, [userName.email, pageNum]);\n  /*useEffect(() => {\n    //console.log(\"http://localhost:3001/gridList/\" + \"4\");\n     //jsonformatter();\n    let q = 0;\n    \n    pageButton(gridList);\n    console.log(\"i have been called on first wert\" + gridList[1].cartnum);\n    setCarTotal(q);\n  }, [gridList]);*/\n\n  return isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Modal, {\n      visible: visible,\n      tabState: tabState,\n      setTabState: setTabState,\n      handleVisible: handleVisible,\n      titleText: titler(tabState),\n      inputValue: inputValue,\n      setInputValue: setInputValue,\n      valiTime: valiTime //name is unclear\n      ,\n      setValiTime: setValiTime,\n      handleTab: handleTab,\n      gridList: gridList,\n      setPreDest: setPreDest,\n      apiValid: apiValid,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [tabState != 8 ? /*#__PURE__*/_jsxDEV(ModalContent, {\n          tabState: tabState,\n          setTabState: setTabState,\n          inputValue: inputValue,\n          setInputValue: setInputValue,\n          valiTime: valiTime,\n          setValiTime: setValiTime,\n          handleTab: handleTab,\n          gridList: gridList,\n          setGridList: setGridList,\n          preDest: preDest,\n          setPreDest: setPreDest,\n          putposter: putposter,\n          getProducts: getProducts,\n          cart: cart,\n          setCart: setCart,\n          loggedIn: loggedIn,\n          setLoggedIn: setLoggedIn,\n          apiValid: apiValid,\n          setapiValid: setapiValid,\n          checkLogin: checkLogin,\n          getLogin: getLogin,\n          putuser: putuser,\n          putStatus: putStatus,\n          carTotal: carTotal,\n          setCarTotal: setCarTotal,\n          setUserName: setUserName,\n          userName: userName,\n          emailErr: emailErr,\n          setEmailErr: setEmailErr,\n          sortList: sortList,\n          setSortList: setSortList,\n          setPageNum: setPageNum,\n          pageNum: pageNum,\n          chosenOne: chosenOne,\n          setChosenOne: setChosenOne\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children:\n          /*Object.keys(gridList)\n          .filter((haveidnum) => gridList[haveidnum].idnum !== undefined)\n          .sort((j, k) => {\n            //console.log(\"sorter gL[j]\" + gridList[j].idnum);\n            return gridList[j].idnum - gridList[k].idnum;\n          }) //August 28 wipe change # 27 hooey this is an attempt //didn't work cause it's only sorting the given 6cut //putit before slice\n          .slice(pageNum, pageNum + pageend())*/\n          sortList !== [0] ? sortList.map((e, i) => {\n            //if (Object.keys(gridList[e]).length > 1) {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(GridItem, {\n                tabState: tabState,\n                setTabState: setTabState,\n                itemnum: e,\n                setPreDest: setPreDest,\n                preDest: preDest,\n                setValiTime: setValiTime,\n                gridList: gridList,\n                setGridList: setGridList,\n                cart: cart,\n                setCart: setCart,\n                putposter: putposter,\n                carTotal: carTotal,\n                setCarTotal: setCarTotal,\n                putuser: putuser,\n                userName: userName,\n                getLogin: getLogin,\n                apiValid: apiValid,\n                sortList: sortList,\n                setSortList: setSortList,\n                setPageNum: setPageNum,\n                pageNum: pageNum,\n                chosenOne: chosenOne,\n                setChosenOne: setChosenOne\n              }, \"griditemkey\" + i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 25\n              }, this)\n            }, \"id\" + e, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 23\n            }, this); //}\n          }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pagebuttonwrapper\",\n          children: pageCount.map((e, i) => {\n            if (tabState == 8) {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(PageButton, {\n                  setPageNum: setPageNum,\n                  i: i,\n                  chosenOne: chosenOne,\n                  setChosenOne: setChosenOne\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false);\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"pagenum: \", pageNum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"user: \", JSON.stringify(userName)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"cartotal: \", carTotal]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"tabstate: \", tabState]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: JSON.stringify(gridList)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"preDest: \", preDest]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"inputValue: \", inputValue.email, \", \", inputValue.pw]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"apivalid: \", apiValid ? \"true\" : \"false\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Login, \"UG5seCIx1wX9tqSIQEGUjoga3FU=\");\n\n_c = Login;\nexport default Login;\n{\n  /*name: \"guy 1\",\n      desc: \"wow\",\n      category: \"sports\",\n      price: 10,\n      quantity: 20,\n    img: \"\",*/\n}\n{\n  /* <p>tabstate: {tabState}</p>\n            <p>{JSON.stringify(gridList)}</p>\n            <p>preDest: {preDest}</p>\n            <p>\n              inputValue: {inputValue.email}, {inputValue.pw}\n            </p>\n            <p>apivalid: {apiValid ? \"true\" : \"false\"}</p>*/\n}\n/*\n/*const getProducts = async () => {\n  const x = await fetch(\"http://localhost:3001/gridList\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n    .then((res) => res.json())\n    .then(async (result) => {\n      let a = Object.assign(result);\n      try {\n        //username\n        let y = [];\n        let x = Object.keys(a).map((e, i) => {\n          userName[\"cartpredest\"].map((r, j) => {\n            console.log(\"cartcnumr j\" + j);\n            console.log(\"cartcnumr r\" + r);\n            console.log(\n              \"cartcnumr result[price]\" + JSON.stringify(result[i])\n            );\n            console.log(\"cartcnumr result[id]\" + result[\"id\"]);\n            /* console.log(\n              \"cartcnum userName[cartcnum][j]\" + userName[\"cartcnum\"][j]\n            );\n            console.log(\n              \"cartcnum userName[cartpredest][j]\" + userName[\"cartpredest\"][j]\n            );*/\n\n/*if (a[i][\"idnum\"] == r) {\n                a[r][\"cartnum\"] = userName[\"cartcnum\"][j];\n              } else {\n                a[r][\"cartnum\"] = 0;\n              }*/\n\n/*   });\n          });\n          console.log(\"cartcnumr a\" + JSON.stringify(a));\n          setGridList(a);\n          console.log(\"zoo wee mama\" + x);\n        } catch (e) {\n          console.log(\"wagamama\" + e);\n          setGridList(result);\n        }\n        //console.log(\"result ==\" + JSON.stringify(result[0][1].name));\n        return result;\n      });\n    return x;\n    /*.then((res) => res.json())\n      .then((result) => {\n        console.log(\"incoming result\");\n        //console.log(result[0][1]);\n        console.log(result);\n      })\n      .catch(console.log);*/\n//return x.json();\n\n/*const y = await x.json();\n    console.log(\"use2 = \" + JSON.stringify(y));\n    return y;*/\n// };\n\n/*const getLogin = async () => {\n    const x = await fetch(\"http://localhost:3001/users\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        //setGridList(result);\n        return result;\n      });\n    return x;\n  };*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","ModalContent","Modal","GridItem","PageButton","Login","visible","setVisible","tabState","setTabState","cart","setCart","loggedIn","setLoggedIn","apiValid","setapiValid","valiTime","setValiTime","putStatus","carTotal","setCarTotal","setApiDone","gridList","setGridList","getLogin","checkLogin","userName","setUserName","putuser","postApi","setPostApi","inputValue","setInputValue","putposter","getProducts","setPreDest","preDest","pageNum","setPageNum","emailErr","setEmailErr","isLoading","loginRoster","setLoginRoster","pageCount","setPageCount","chosenOne","setChosenOne","sortList","setSortList","handleVisible","handleTab","e","email","pw","titler","postposter","fetch","method","headers","Accept","body","JSON","stringify","then","response","ok","json","pageButton","y","z","Object","keys","slice","map","j","i","length","a","Math","ceil","push","pageend","jsonformatter","listsorter","wtf","filter","haveidnum","idnum","undefined","sort","k","console","log","intarray","parseInt"],"sources":["/Users/stevenfan/Documents/2022/Chuwa/project2ts/src/components/home/login/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\n\nimport MyModal from \"../../modalsandwicher\";\nimport ModalContent from \"./modalcontent\";\nimport Modal from \"../../modalsandwicher/modal\";\nimport HomeContent from \"./homecontent\";\nimport GridItem from \"./gridItem\";\nimport PageButton from \"./pagebutton\";\n\nconst Login = ({\n  visible,\n  setVisible,\n  tabState,\n  setTabState,\n  cart,\n  setCart,\n  loggedIn,\n  setLoggedIn,\n  apiValid,\n  setapiValid,\n  valiTime,\n  setValiTime,\n  putStatus,\n  carTotal,\n  setCarTotal,\n  setApiDone,\n  gridList,\n  setGridList,\n  getLogin,\n  checkLogin,\n  userName,\n  setUserName,\n  putuser,\n  postApi,\n  setPostApi,\n  inputValue,\n  setInputValue,\n  putposter,\n  getProducts,\n  setPreDest,\n  preDest,\n  pageNum,\n  setPageNum,\n  emailErr,\n  setEmailErr,\n  isLoading,\n}) => {\n  //const [visible, setVisible] = useState(false);\n  //const [tabState, setTabState] = useState(1);\n  //const [inputEmail, setInputEmail] = useState(\"\"); //unused\n  //const [inputPassword, setInputPassword] = useState(\"\"); //unused\n  //const [inputValue, setInputValue] = useState({ email: \"\", pw: \"\" });\n  //const [valiTime, setValiTime] = useState(false); //just bring out the input values to ModalContent\n  //const [preDest, setPreDest] = useState(0);\n  //const [jsonstate, setJsonState] = useState({ 0: \"wow\" });\n  const [loginRoster, setLoginRoster] = useState({ 0: \"wow\" });\n  //const [postApi, setPostApi] = useState(false);\n  //const [userName, setUserName] = useState({ he: \"wgui\" });\n  //const [pageNum, setPageNum] = useState(1);\n  const [pageCount, setPageCount] = useState([]);\n  const [chosenOne, setChosenOne] = useState(1);\n  const [sortList, setSortList] = useState([0]);\n\n  /*const listFill = (e) => {\n    let x = Object.keys(e).length;\n    let i = 0;\n    e.map();\n  };*/\n\n  const handleVisible = () => {\n    setVisible(!visible);\n  };\n\n  const handleTab = (e) => {\n    setTabState(e);\n\n    /*let j = {};\n    for (let i = 0; i++; i < Object.keys(inputValue).length) {\n      console.log([Object.keys(inputValue)]);\n      j[Object.keys(inputValue)[i]] = \"\";\n    }*/\n    setValiTime(false);\n    setInputValue({ email: \"\", pw: \"\" });\n  };\n\n  const titler = (tabState) => {\n    switch (tabState) {\n      case 1:\n        return \"Sign In\";\n      case 2:\n        return \"Sign Up\";\n      case 3:\n        return \"Update Password\";\n      case 4:\n        return \"PASS UPDATE SBEMT\";\n      case 5:\n        return \"grid element product\";\n      case 6:\n        //return \"grid detail product\";\n        return \"Product Details\";\n      case 7:\n        //return \"add product\";\n        return \"Add Product\";\n      case 8:\n        return \"Products\";\n      default:\n        setTabState(1);\n        return \"\";\n    }\n  };\n\n  /* const getCustomerApi = async () => {\n    const response = await fetch(`../../../../db.json`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return response;\n  };*/\n\n  const postposter = async () => {\n    if (!postApi) {\n      await fetch(\"http://localhost:3002/gridList\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application.json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(gridList),\n      }).then((response) => {\n        if (response.ok) {\n          setPostApi(true);\n          return response.json();\n        }\n      });\n      //return changeProducts;\n    }\n  };\n\n  /*const putposter = async (i, e) => {\n    let x = 0;\n    await fetch(\"http://localhost:3001/gridList/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(e),\n    }).then((response) => {\n      if (response.ok) {\n        console.log(\"ecartnum\" + e.cartnum);\n        getProducts();\n        setPostApi(true);\n        //setCarTotal((carTotal += x));\n        return response.json();\n      }\n    });\n  };*/\n\n  /* const putuser = async (i, e, a, b) => {\n    let x = i;\n    let y = { ...e, cartpredest: a, cartcnum: b };\n    await fetch(\"http://localhost:3001/users/\" + i, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application.json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(y),\n    }).then((response) => {\n      if (response.ok) {\n        setPostApi(true);\n        return response.json();\n      }\n    });\n  };*/\n\n  const pageButton = (e) => {\n    let y = [];\n    let z = 0;\n    //console.log(\"pagenum\" + Object.keys(e[1]).length);\n    Object.keys(e)\n      .slice(1)\n      .map((j, i) => {\n        if (Object.keys(e[i]).length > 1) {\n          z++;\n          /*console.log(\"pagenum z\" + (z % 6));\n          if (z % 6 == 0) {\n            y.push(1);\n          }*/\n          /*return (\n          <>\n            <button\n              className=\"pagebutton\"\n              onClick={() => {\n                setPageNum(i * 6 + 1);\n              }}\n            >\n              {i}\n            </button>\n            <p>{gridList.length / 6 + 1}</p>\n          </>\n        );*/\n        }\n      });\n    z--;\n    //y.push(1);\n    let a = Math.ceil(z / 6);\n    for (let i = 0; i < a; i++) {\n      y.push(1);\n    }\n    //console.log(\"pagenum z\" + z);\n    setPageCount(y);\n    /*for (let i = 0; i < x.length / 6 + 1; i++) {\n      return (\n        \n      );\n    }*/\n  };\n\n  const pageend = () => {\n    /*\n    let counter = 0;\n    let index = 0;\n    while (counter < 6 && pageNum + index < Object.keys(gridList).length) {\n      console.log(\"counterindex\");\n      if (\n        gridList[index] !== undefined &&\n        Object.keys(gridList[pageNum + index]).length > 1\n      ) {\n        counter++;\n      }\n      index++;\n    }*/\n    //let a = 6 - Object.keys(gridList).slice(pageNum).length;\n    //let a = counter - Object.keys(gridList).slice(pageNum).length;\n    /*if (a < 0) {\n      return 6;\n    } else {\n      return Object.keys(gridList).slice(pageNum).length;\n    }*/\n    if (Object.keys(gridList).slice(pageNum).length > 6) {\n      //return [index];\n      return 6;\n    } else {\n      return [Object.keys(gridList).slice(pageNum).length];\n    }\n  };\n\n  const jsonformatter = async () => {\n    //if (!apidone) {\n    //let x = await getProducts();\n    //let y = Object.assign(gridList);\n    //console.log(\"nannyexpress style - \" + JSON.stringify(jsonstate[0][\"0\"]));\n    //console.log(\"jsonstate\");\n    //setApiDone(true);\n    //setJsonState(await getProducts());\n    getProducts().then((e) => {\n      pageButton(e);\n    });\n    setLoginRoster(await getLogin());\n    //console.log(\"gridList check \" + gridList[1]);\n    //return x;\n    /*} else {\n      let x = {};\n      return x;\n    }*/\n  };\n\n  /*const letsago = async () => {\n    let q = 0;\n    let x = await jsonformatter();\n    //setCarTotal(q);\n    return x;\n  };*/\n\n  /*const checkLogin = async (a, b) => {\n    let x = await getLogin();\n    let y = false;\n    let z = \"\";\n    console.log(\"excalixer: \" + JSON.stringify(x[0][\"email\"]));\n    await Object.keys(x).map((e, i) => {\n      console.log(\"excali\" + JSON.stringify(x[1]));\n      if (x[i][\"email\"] == a && x[i][\"pw\"] == b) {\n        y = true;\n        setUserName(x[i]);\n        z = x[i][\"email\"];\n      }\n    });\n    setapiValid(y);\n    putStatus({ status: y });\n    return z;\n  };*/\n  useEffect(() => {\n    pageButton(gridList);\n    listsorter(gridList);\n  }, [gridList]);\n\n  useEffect(() => {\n    jsonformatter();\n  }, []);\n\n  const listsorter = (e) => {\n    let wtf = Object.keys(e)\n      .filter((haveidnum) => e[haveidnum].idnum !== undefined)\n      .sort((j, k) => {\n        //console.log(\"sorter gL[j]\" + e[j].idnum);\n        //console.log(\"sorter gL[k]\" + e[k].idnum);\n        return e[j].idnum - e[k].idnum; //August 28 wipe change # 27 hooey this is an attempt //didn't work cause it's only sorting the given 6cut //putit before slice\n      })\n      .slice(pageNum - 1, pageNum + pageend() - 1);\n    console.log(\"sorterpageend\" + pageend());\n    let intarray = wtf.map((e) => {\n      return parseInt(e); //the biggest return of my life\n    });\n    setSortList(intarray);\n    console.log(\"sorter wtf\" + JSON.stringify(wtf));\n  };\n\n  useEffect(() => {\n    //August 28 wipe change # 23 now changes only when email changes, not any userName cart change\n    getProducts().then((e) => {\n      pageButton(e);\n      listsorter(e);\n    });\n  }, [userName.email, pageNum]);\n\n  /*useEffect(() => {\n    //console.log(\"http://localhost:3001/gridList/\" + \"4\");\n\n    //jsonformatter();\n    let q = 0;\n    \n    pageButton(gridList);\n    console.log(\"i have been called on first wert\" + gridList[1].cartnum);\n    setCarTotal(q);\n  }, [gridList]);*/\n\n  return isLoading ? (\n    <div>loading</div>\n  ) : (\n    <>\n      {/*console.log(\"fetch result\")}\n      {console.log(\"before getProducts\")*/}\n      {/*{async () => {\n        console.log(\"usuable gedsfat\" + (await getProducts()));\n      }}*/}{\" \"}\n      {/* for some reason this never showed up on console, also disappeared \"use2\" */}\n      {/*console.log(\"after getProducts\")}\n      {console.log(\"gridList stringify - \" + JSON.stringify({ gridList }))*/}\n      {/*<a>jsonguh{apidone ? jsonstate![0][1][\"name\"] : \"nothin\"}</a>*/}\n      {/*{changeposter().then((e) => console.log(\"change attempt \" + e))}*/}\n      {/*<div className={\"headers\"}>\n        <span className={\"logbutton\"} onClick={() => setVisible(!visible)}>\n          Login\n        </span>\n  </div>*/}\n      <Modal\n        visible={visible}\n        tabState={tabState}\n        setTabState={setTabState}\n        handleVisible={handleVisible}\n        titleText={titler(tabState)}\n        inputValue={inputValue}\n        setInputValue={setInputValue}\n        valiTime={valiTime} //name is unclear\n        setValiTime={setValiTime}\n        handleTab={handleTab}\n        gridList={gridList}\n        setPreDest={setPreDest}\n        apiValid={apiValid}\n      >\n        <>\n          {/*<button onClick={() => setTabState(tabState + 1)}>\n            tabstate changer\n</button>*/}\n          {tabState != 8 ? (\n            <ModalContent\n              tabState={tabState}\n              setTabState={setTabState}\n              inputValue={inputValue}\n              setInputValue={setInputValue}\n              valiTime={valiTime}\n              setValiTime={setValiTime}\n              handleTab={handleTab}\n              gridList={gridList}\n              setGridList={setGridList}\n              preDest={preDest}\n              setPreDest={setPreDest}\n              putposter={putposter}\n              getProducts={getProducts}\n              cart={cart}\n              setCart={setCart}\n              loggedIn={loggedIn}\n              setLoggedIn={setLoggedIn}\n              apiValid={apiValid}\n              setapiValid={setapiValid}\n              checkLogin={checkLogin}\n              getLogin={getLogin}\n              putuser={putuser}\n              putStatus={putStatus}\n              carTotal={carTotal}\n              setCarTotal={setCarTotal}\n              setUserName={setUserName}\n              userName={userName}\n              emailErr={emailErr}\n              setEmailErr={setEmailErr}\n              sortList={sortList}\n              setSortList={setSortList}\n              setPageNum={setPageNum}\n              pageNum={pageNum}\n              chosenOne={chosenOne}\n              setChosenOne={setChosenOne}\n            />\n          ) : (\n            <div>\n              {/*<p>{Object.keys(gridList).slice(pageNum, pageNum + 5)}</p>*/}\n              {\n                /*Object.keys(gridList)\n                .filter((haveidnum) => gridList[haveidnum].idnum !== undefined)\n                .sort((j, k) => {\n                  //console.log(\"sorter gL[j]\" + gridList[j].idnum);\n                  return gridList[j].idnum - gridList[k].idnum;\n                }) //August 28 wipe change # 27 hooey this is an attempt //didn't work cause it's only sorting the given 6cut //putit before slice\n                .slice(pageNum, pageNum + pageend())*/\n                sortList !== [0] ? (\n                  sortList.map((e, i) => {\n                    //if (Object.keys(gridList[e]).length > 1) {\n                    return (\n                      <span key={\"id\" + e}>\n                        {/*console.log(\"id\" + i)*/}\n                        <GridItem\n                          key={\"griditemkey\" + i}\n                          tabState={tabState}\n                          setTabState={setTabState}\n                          itemnum={e}\n                          setPreDest={setPreDest}\n                          preDest={preDest}\n                          setValiTime={setValiTime}\n                          gridList={gridList}\n                          setGridList={setGridList}\n                          cart={cart}\n                          setCart={setCart}\n                          putposter={putposter}\n                          carTotal={carTotal}\n                          setCarTotal={setCarTotal}\n                          putuser={putuser}\n                          userName={userName}\n                          getLogin={getLogin}\n                          apiValid={apiValid}\n                          sortList={sortList}\n                          setSortList={setSortList}\n                          setPageNum={setPageNum}\n                          pageNum={pageNum}\n                          chosenOne={chosenOne}\n                          setChosenOne={setChosenOne}\n                        />\n                      </span>\n                    );\n                    //}\n                  })\n                ) : (\n                  <></>\n                )\n              }\n\n              {/*<GridItem\n                tabState={tabState}\n                setTabState={setTabState}\n                itemnum={1}\n                setPreDest={setPreDest}\n                preDest={preDest}\n                setValiTime={setValiTime}\n                gridList={gridList}\n              />\n              <GridItem\n                tabState={tabState}\n                setTabState={setTabState}\n                itemnum={2}\n                setPreDest={setPreDest}\n                preDest={preDest}\n                setValiTime={setValiTime}\n                gridList={gridList}\n            />*/}\n            </div>\n          )}\n          <div className=\"pagebuttonwrapper\">\n            {/*{pageCount.length}*/}\n            {pageCount.map((e, i) => {\n              if (tabState == 8) {\n                return (\n                  <>\n                    <PageButton\n                      setPageNum={setPageNum}\n                      i={i}\n                      chosenOne={chosenOne}\n                      setChosenOne={setChosenOne}\n                    />\n                    {/*<a className=\"hehe\">{pageCount}</a>*/}\n                  </>\n                );\n              }\n            })}\n          </div>\n          {/* end of an era*/}\n          <p>pagenum: {pageNum}</p>\n          <p>user: {JSON.stringify(userName)}</p>\n          <p>cartotal: {carTotal}</p>\n          <p>tabstate: {tabState}</p>\n          <p>{JSON.stringify(gridList)}</p>\n          <p>preDest: {preDest}</p>\n          <p>\n            inputValue: {inputValue.email}, {inputValue.pw}\n          </p>\n          <p>apivalid: {apiValid ? \"true\" : \"false\"}</p> {/**/}\n        </>\n      </Modal>\n    </>\n  );\n};\n\nexport default Login;\n{\n  /*name: \"guy 1\",\n      desc: \"wow\",\n      category: \"sports\",\n      price: 10,\n      quantity: 20,\n    img: \"\",*/\n}\n{\n  /* <p>tabstate: {tabState}</p>\n            <p>{JSON.stringify(gridList)}</p>\n            <p>preDest: {preDest}</p>\n            <p>\n              inputValue: {inputValue.email}, {inputValue.pw}\n            </p>\n            <p>apivalid: {apiValid ? \"true\" : \"false\"}</p>*/\n} /*\n\n/*const getProducts = async () => {\n    const x = await fetch(\"http://localhost:3001/gridList\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then(async (result) => {\n        let a = Object.assign(result);\n        try {\n          //username\n          let y = [];\n          let x = Object.keys(a).map((e, i) => {\n            userName[\"cartpredest\"].map((r, j) => {\n              console.log(\"cartcnumr j\" + j);\n              console.log(\"cartcnumr r\" + r);\n              console.log(\n                \"cartcnumr result[price]\" + JSON.stringify(result[i])\n              );\n              console.log(\"cartcnumr result[id]\" + result[\"id\"]);\n              /* console.log(\n                \"cartcnum userName[cartcnum][j]\" + userName[\"cartcnum\"][j]\n              );\n              console.log(\n                \"cartcnum userName[cartpredest][j]\" + userName[\"cartpredest\"][j]\n              );*/\n/*if (a[i][\"idnum\"] == r) {\n                a[r][\"cartnum\"] = userName[\"cartcnum\"][j];\n              } else {\n                a[r][\"cartnum\"] = 0;\n              }*/\n/*   });\n          });\n          console.log(\"cartcnumr a\" + JSON.stringify(a));\n          setGridList(a);\n          console.log(\"zoo wee mama\" + x);\n        } catch (e) {\n          console.log(\"wagamama\" + e);\n          setGridList(result);\n        }\n        //console.log(\"result ==\" + JSON.stringify(result[0][1].name));\n        return result;\n      });\n    return x;\n    /*.then((res) => res.json())\n      .then((result) => {\n        console.log(\"incoming result\");\n        //console.log(result[0][1]);\n        console.log(result);\n      })\n      .catch(console.log);*/\n\n//return x.json();\n/*const y = await x.json();\n    console.log(\"use2 = \" + JSON.stringify(y));\n    return y;*/\n// };\n/*const getLogin = async () => {\n    const x = await fetch(\"http://localhost:3001/users\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        //setGridList(result);\n        return result;\n      });\n    return x;\n  };*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}